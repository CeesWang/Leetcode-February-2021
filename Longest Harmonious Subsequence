class Solution {
    public int findLHS(int[] nums) {
        int res = 0;
        int len = nums.length;
        for (int i = 0; i < len; ++i) {
            int plus = 0;
            int min = 0;
            int same = 1;
            for (int j = i + 1; j < len; ++j) {
                if (nums[i] == nums[j]) same++;
                else if (nums[i] + 1 == nums[j]) plus++;
                else if (nums[i] - 1 == nums[j]) min++; 
            }
            if (min > 0 || plus > 0) {
                int max = Math.max(same + plus, same + min);
                res = Math.max(max, res);
            }
        }
        return res;
    }
}

class Solution {
    public int findLHS(int[] nums) {
        HashMap<Integer, Integer> countMap = new HashMap<>();
        int res = 0;
        for (int num : nums) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }

        for (int key: countMap.keySet()) {
            if (countMap.containsKey(key + 1)) {
                res = Math.max(res, countMap.get(key) + countMap.get(key + 1)); 
            }

        }
        return res;
    }
}
