/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        ArrayList<Node> list = new ArrayList<>();
        HashMap<Node, Integer> map = new HashMap<>();
        HashMap<Node, ArrayList<Integer>> forwardMap = new HashMap<>();
        int idx = 0;
        Node temp = head;
        while (temp != null) {
            Node n = new Node(temp.val);
            list.add(n);
            map.put(temp, idx);
            if (idx > 0) {
                list.get(idx - 1).next = n;
            }
            if (temp.random != null) {
                if (map.containsKey(temp.random)) { // backwards random
                    int i = map.get(temp.random);
                    n.random = list.get(i);
                }
                else {
                    System.out.println(temp.random.val);
                    if(forwardMap.containsKey(temp.random)) {
                        forwardMap.get(temp.random).add(idx);
                    }
                    else {
                        ArrayList<Integer> l = new ArrayList<>();
                        l.add(idx);
                        forwardMap.put(temp.random, l);
                    }
                }
            }
            if (forwardMap.containsKey(temp)) {
                for (Integer i : forwardMap.get(temp)) {
                    list.get(i).random = n;
                }
            }
            temp = temp.next;
            idx++;
        }
        return list.size() == 0 ? null : list.get(0);
    }
}
// 1 -> 2 -> 3  -> 4
