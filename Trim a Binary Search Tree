/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if (root == null) {
            return root; 
        }
        if (root.val < low && root.right != null && root.right.val >= low) {
            root = root.right;
        }
        if (root.val > high) {
            root = root.left;
        }
        dfs(root, low, high, root);
        return root;
    }
    
    public void dfs(TreeNode node, int low, int high, TreeNode root) {
        if (node == null) {
            return;
        }
        if (node.left == null && node.right == null && node.val >= low && node.val <= high) {
            root = node;                                     
        }
        if (node.left != null) {
            if (node.left.val < low) {
                if (node.left.right != null && node.left.right.val < low) {
                    node.left = null;
                }
                else {
                    node.left = node.left.right;                    
                }
            }
        }
        if (node.right != null) {
            if (node.right.val > high) {
                node.right = null;
            }
        }
        dfs(node.left, low, high, root);
        dfs(node.right, low, high, root);
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if (root == null) return root;
        if (root.val >= low && root.val <= high) {
            root.left = trimBST(root.left, low, high);
            root.right = trimBST(root.right, low, high);
            return root;
        }
        return root.val < low ? trimBST(root.right, low,high) : trimBST(root.left, low, high);  
    }
}
